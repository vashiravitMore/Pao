<!DOCTYPE html>
<html>
<head>
	<title>Pao</title>
	<script src="../../../javascripts/fabric.js" ></script>
	<script src="https://cdn.socket.io/socket.io-1.3.3.js"></script>
	<style type="text/css">
	 	canvas{border: 1px solid red; }
	</style>
</head>
<body>
	<canvas id="canvas" width="600" height="600"></canvas>
</body>
<script type="text/javascript">
		var socket = io();
		var line, isDown;
		var arr = new Array();
		var startx = new Array();
		var endx = new Array();
		var starty = new Array();
		var endy = new Array();
		var temp = 0;
		var graphtype; trigger = "1";
				 
        var canvas = this.__canvas = new fabric.Canvas('canvas', {  hoverCursor: 'pointer',selection: false});     
		fabric.Object.prototype.transparentCorners = false;


		socket.on('addLine', function(points) {
			line = new fabric.Line(points, {
					 strokeWidth: 2,			
					 stroke: 'red',
					 originX: 'center',
					 originY: 'center'					
				 });
			canvas.add(line);
    });


		socket.on('moveLine', function(pointer) {
			line.set({ x2: pointer.x, y2: pointer.y });
			canvas.renderAll();
    });

		canvas.on('mouse:down', function(o){			
			if(trigger=="1"){
				 isDown = true;
				 var pointer = canvas.getPointer(o.e);

				 var points = [pointer.x, pointer.y, pointer.x, pointer.y];
				 startx[temp] = pointer.x;
				 starty[temp] = pointer.y;
				 /*line = new fabric.Line(points, {
					 strokeWidth: 2,			
					 stroke: 'red',
					 originX: 'center',
					 originY: 'center'					
				 });*/
				 //console.log("valueLine", line);
				 socket.emit("addLineServer", points);
				 //canvas.add(line);
			}else{		
				canvas.forEachObject(function(o){ 
					o.setCoords(); 
					
				});
			}			
		});

		canvas.on('mouse:move', function(o){
			if (!isDown) return;
			var pointer = canvas.getPointer(o.e);
			//line.set({ x2: pointer.x, y2: pointer.y });
			socket.emit("moveLineServer", pointer);
			
			endx[temp] = pointer.x;
			endy[temp] = pointer.y;		
			
			if(trigger=="1"){
				console.log("trigger");
				var px = Calculate.lineLength(startx[temp], starty[temp], endx[temp], endy[temp]).toFixed(2);	
				var text = new fabric.Text('Length ' + px, { left: endx[temp], top: endy[temp], fontSize: 12 });					
				canvas.add(text);				
			}
			
			canvas.renderAll();
		});	
 
		
		canvas.on('mouse:up', function(o){
			 var pointer = canvas.getPointer(o.e);			
			 isDown = false;			
				
		});
		
		canvas.on('mouse:over', function(e) {	
			e.target.setStroke('blue');
			//console.log("target", e.target);
			canvas.renderAll();
		});
		
		canvas.on('mouse:out', function(e) {			
			e.target.setStroke('red');
			canvas.renderAll();
		});   

		canvas.on('object:modified', function(options){
           // console.info("object modified",options.target.id)
    },false);
		
		var Calculate={
			lineLength:function(x1, y1, x2,y2){//线长    
				//console.log(x1 + ", "+ y1 +", " + x2 + ", " + y2);
				//clearRect(x2, y2);
				return Math.sqrt(Math.pow(x2*1-x1*1, 2)+Math.pow(y2*1-y1*1, 2));
			}
		}	
</script>
</html>